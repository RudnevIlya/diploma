import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from catboost import CatBoostClassifier, Pool
import matplotlib.pyplot as plt
import seaborn as sns

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
df = pd.read_csv("merged_results_with_sentiment.csv")
df = df[df["Rating"] >= 0]

# === –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –±–∏–Ω–∞—Ä–Ω—É—é –∑–∞–¥–∞—á—É ===
# 1 ‚Äì –≤—ã—Å–æ–∫–∏–π, 0 ‚Äì –Ω–µ –≤—ã—Å–æ–∫–∏–π
df["BinaryClass"] = df["Rating"].apply(lambda r: 1 if r > 4.25 else 0)

# –ü—Ä–∏–∑–Ω–∞–∫–∏
features = ["HD_D", "Average_TFIDF", "Length", "LexicalDiversity", "SentimentScore"]
X = df[features]
y = df["BinaryClass"]

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# === –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤ ===
smote = SMOTE(random_state=42)
X_balanced, y_balanced = smote.fit_resample(X_scaled, y)

# === Train/Test split ===
X_train, X_test, y_train, y_test = train_test_split(X_balanced, y_balanced, test_size=0.2, random_state=42, stratify=y_balanced)

# === –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ===
model = CatBoostClassifier(
    iterations=200,
    learning_rate=0.03,
    depth=6,
    verbose=0
)
model.fit(X_train, y_train)

# === –û—Ü–µ–Ω–∫–∞ ===
y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
print(f"‚úÖ Accuracy: {acc:.4f}")
print("üìä Classification report:")
print(classification_report(y_test, y_pred, target_names=["–Ω–µ –≤—ã—Å–æ–∫–∏–π", "–≤—ã—Å–æ–∫–∏–π"]))

# === –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ ===
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=["–Ω–µ –≤—ã—Å–æ–∫–∏–π", "–≤—ã—Å–æ–∫–∏–π"], yticklabels=["–Ω–µ –≤—ã—Å–æ–∫–∏–π", "–≤—ã—Å–æ–∫–∏–π"])
plt.xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ")
plt.ylabel("–ò—Å—Ç–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
plt.title("Confusion Matrix: –≤—ã—Å–æ–∫–∏–π vs –æ—Å—Ç–∞–ª—å–Ω—ã–µ (—Å SMOTE)")
plt.tight_layout()
plt.savefig("confusion_high_vs_rest_smote.png")
print("‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ 'confusion_high_vs_rest_smote.png'")
