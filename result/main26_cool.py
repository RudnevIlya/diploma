import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from imblearn.over_sampling import RandomOverSampler
from catboost import CatBoostClassifier, CatBoostRegressor
import matplotlib.pyplot as plt
import seaborn as sns

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
df = pd.read_csv("merged_results_with_sentiment.csv")
df = df[df["Rating"] >= 0]

# –ü—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
# features = ["HD_D", "Average_TFIDF", "Length", "LexicalDiversity", "SentimentScore"]
features = [
    "HD_D", "Average_TFIDF", "Value", "Length",
    "AvgWordLength", "AvgSentenceLength", "LongWordRatio", "LexicalDiversity", "SentimentScore"
]
X = df[features]
low, high = 3.89, 4.25
def rating_to_class(r): return 0 if r <= low else 1 if r <= high else 2
# y_class = y_rating.apply(rating_to_class)
y_binary = df["Rating"].apply(lambda r: rating_to_class(r))  # 1 - –≤—ã—Å–æ–∫–∏–π, 0 - –Ω–µ –≤—ã—Å–æ–∫–∏–π

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤
ros = RandomOverSampler(random_state=42)
X_resampled, y_resampled = ros.fit_resample(X_scaled, y_binary)

# –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π/—Ç–µ—Å—Ç–æ–≤—ã–π —Å–ø–ª–∏—Ç
X_train, X_test, y_train, y_test = train_test_split(
    X_resampled, y_resampled, test_size=0.15, random_state=42
)

# === –†–µ–≥—Ä–µ—Å—Å–æ—Ä (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π) ===
reg = CatBoostRegressor(verbose=0)
reg.fit(X_train, y_train)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–æ—Ä–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞
X_train_reg = np.hstack([X_train, reg.predict(X_train).reshape(-1, 1)])
X_test_reg = np.hstack([X_test, reg.predict(X_test).reshape(-1, 1)])

# === –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–æ–º ===
clf = LogisticRegression(max_iter=1000)
clf.fit(X_train_reg, y_train)
y_pred = clf.predict(X_test_reg)

# === –ú–µ—Ç—Ä–∏–∫–∏ ===
acc = accuracy_score(y_test, y_pred)
print(f"‚úÖ Accuracy: {acc:.4f}")
print("üìä Classification report:")
print(classification_report(y_test, y_pred, target_names=["–Ω–µ –≤—ã—Å–æ–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π"]))

# === –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ ===
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt="d", xticklabels=["–Ω–µ –≤—ã—Å–æ–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π"],
            yticklabels=["–Ω–µ –≤—ã—Å–æ–∫–∏–π", "–≤—ã—Å–æ–∫–∏–π"], cmap="Blues")
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix (High vs Rest with Regression Feature)")
plt.tight_layout()
plt.savefig("confusion_high_vs_rest_with_reg.png")
print("‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ 'confusion_high_vs_rest_with_reg.png'")
