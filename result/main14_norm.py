import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from catboost import CatBoostClassifier
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score, f1_score, confusion_matrix
from collections import Counter

# === –ì—Ä–∞–Ω–∏—Ü—ã –∫–ª–∞—Å—Å–æ–≤ –ø–æ –∫–≤–∞—Ä—Ç–∏–ª—è–º ===
low_thresh = 3.89
high_thresh = 4.25
class_names = ["–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–≤—ã—Å–æ–∫–∏–π"]

def map_quantile_class(r):
    if r <= low_thresh:
        return 0
    elif r <= high_thresh:
        return 1
    else:
        return 2

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
df = pd.read_csv("merged_results.csv")
df = df[df["Rating"] >= 0]
df["Class"] = df["Rating"].apply(map_quantile_class)

print("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –∫–ª–∞—Å—Å–∞–º:")
class_counts = df["Class"].astype(int).value_counts().sort_index()
for cls_id, count in class_counts.items():
    print(f"{class_names[cls_id]} ({cls_id}): {count}")

# === –†–∞—Å—á—ë—Ç class_weights (–æ–±—Ä–∞—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞) ===
total = len(df)
weights = {cls: total / count for cls, count in class_counts.items()}
class_weights = [weights.get(i, 1.0) for i in range(3)]
print(f"\n‚öñÔ∏è Class Weights: {class_weights}")

# === –î–∞–Ω–Ω—ã–µ ===
features = ["HD_D", "Average_TFIDF", "Value", "Length"]
X = df[features].values
y = df["Class"].astype(int).values

# === –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è ===
skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
acc_list, f1_list, prec_list, rec_list = [], [], [], []
best_fold_idx = -1
best_accuracy = -1
best_cm = None
best_labels = None

print("\nüöÄ –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è (5 —Ñ–æ–ª–¥–æ–≤):")
for fold, (train_idx, test_idx) in enumerate(skf.split(X, y), 1):
    X_train, X_test = X[train_idx], X[test_idx]
    y_train, y_test = y[train_idx], y[test_idx]

    model = CatBoostClassifier(
        iterations=200,
        learning_rate=0.03,
        depth=7,
        l2_leaf_reg=11,
        random_strength=10,
        bootstrap_type="MVS",
        class_weights=class_weights,
        verbose=0
    )
    model.fit(X_train, y_train)
    preds = model.predict(X_test)

    acc = accuracy_score(y_test, preds)
    f1 = f1_score(y_test, preds, average="macro", zero_division=0)
    prec = precision_score(y_test, preds, average="macro", zero_division=0)
    rec = recall_score(y_test, preds, average="macro", zero_division=0)

    acc_list.append(acc)
    f1_list.append(f1)
    prec_list.append(prec)
    rec_list.append(rec)

    print(f"\n--- Fold {fold}/5 ---")
    print(f"‚úÖ Accuracy: {acc:.4f}")
    print(classification_report(y_test, preds, target_names=class_names, zero_division=0))

    if acc > best_accuracy:
        best_accuracy = acc
        best_fold_idx = fold
        best_cm = confusion_matrix(y_test, preds, labels=[0, 1, 2])
        best_labels = y_test

# === –°—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ ===
print("\nüìä –°—Ä–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ñ–æ–ª–¥–∞–º:")
print(f"‚úîÔ∏è Accuracy:     {np.mean(acc_list):.4f}")
print(f"‚úîÔ∏è F1 (macro):   {np.mean(f1_list):.4f}")
print(f"‚úîÔ∏è Precision:    {np.mean(prec_list):.4f}")
print(f"‚úîÔ∏è Recall:       {np.mean(rec_list):.4f}")

# === –õ—É—á—à–∞—è confusion matrix ===
if best_cm is not None:
    plt.figure(figsize=(6, 5))
    sns.heatmap(best_cm, annot=True, fmt="d", cmap="Blues",
                xticklabels=class_names, yticklabels=class_names)
    plt.xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ")
    plt.ylabel("–ò—Å—Ç–∏–Ω–Ω–æ")
    plt.title(f"–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (–ª—É—á—à–∏–π —Ñ–æ–ª–¥ #{best_fold_idx})")
    plt.tight_layout()
    plt.savefig("best_confusion_matrix.png")
    print(f"\nüìä –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: best_confusion_matrix.png")
